<?php

namespace App\Controller;


use App\Entity\Ad;
use App\Form\AdType;
use Doctrine\Common\Persistence\ObjectManager;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\IsGranted;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Validator\Constraints\DateTime;

 /**
  * Require ROLE_ADMIN for *every* controller method in this class.
  *
  * @IsGranted("ROLE_ADMIN")
  */ 
class AdController extends AbstractController
{
    /**
     * @Route("/annonce/new", name="ad_new")
     * @Route("/annonce/{id}/edit", name="ad_edit")
     */
    public function form(Ad $annonce = null, request $request, ObjectManager $manager)
    {
        if(!$annonce) {
            $annonce = new Ad();

        } else {
            $annonce->setImage(
                new File($this->getParameter('animals_directory').'/'.$annonce->getImage())
            );
        }
        
        $form = $this->createForm(AdType::class, $annonce);        
        $form->handleRequest($request);


        if($form->isSubmitted() && $form->isValid()) {

            if(!$annonce->getId()){
                $annonce->setCreatedAt(new \DateTime());
            }

            /**
             * @var Symfony\Component\HttpFoundation\File\UploadedFile $file
             */

            //$file = $annonce->getImage();
            $file = $form->get('image')->getData();

            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

            // Move the file to the directory where brochures are stored
            try {
                $file->move(
                    $this->getParameter('animals_directory'),
                    $fileName
                );
            } catch (FileException $e) {
                // ... handle exception if something happens during file upload
            }

            // updates the 'brochure' property to store the PDF file name
            // instead of its contents
            $annonce->setImage($fileName);

            $manager->persist($annonce);
            $manager->flush();

            return $this->redirectToRoute('annonce');
        }

        return $this->render('ad/create.html.twig', [
            'formAd' => $form->createView(),
            'edit' => $annonce->getId() !== null
        ]);


    }

     /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }


    /**
     * @Route("/delete/{id}", name="del_ad") 
     *
     * @return Response
     */

    public function delete(Ad $annonce, ObjectManager $manager, $id) {

    	if($annonce == NULL) {
    		$annonce = new Ad();
    	};

		$repo = $this->getDoctrine()->getRepository(Ad::class);
        $annonce = $repo->find($id);

    	$manager->remove($annonce);
    	$manager->flush();

    	return $this->redirectToRoute('annonce');
    }
}